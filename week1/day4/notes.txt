Day 4
----------------------------------------------------------

List Slicing:
 
numbers = [2, 9, 7, 5, 3, 13, 19, 17, 29]

print(numbers) # we get the complete list

print(numbers[0]) # we get the 1st element

print(numbers[-1]) # we get the last element

Hence, we see that -ve indexing is possible in Python

print(numbers[-2]) # we get last but element from the list

print(numbers[:]) # we get the complete list

Here, we have written nothing before the colon and hence it is treated as 0, which means start from the beginning of the list. Here also have not written anything after the colon, which means it is treated as UP TO END OF THE LIST. 

print(numbers[:3]) # Start from index 0 and access elements up to index 3-1 which is 2.

print(numbers[1:-1]) # Start from index 1 (2nd element) and access elements up to last but element, because -1 is the index of last element and we must not include it.

print(numbers[1:8:2]) # start from index 1 and access upto index 8-1 and increment each time by 2 elements. So o/p is [9, 5, 3, 19]

print(numbers[::3]) # start from biginning and go up to end of the list with increment of 3

print(numbers[8:1:-2]) Start from index 8, go up to index 2 with decrement of 2 (or increment of -2)

print(numbers[::-1]) # Since the increment is negative, we understand that we have to move in reverse (meaning from the end to towards the start). The area within the list we have to access is all the elements, because nothing is specified before and after the 1st colon :



--------------------------------------------------------------------------------------------------
Slicing is a process of extracting data from a collection of data by specifying the starting and ending indices and steps to be taken. 


** if you give the step value more than the the index value it always print the starting index element other than showing error, because it already passed the list, then there is nothing in the list so it will prit first index element

**index error : when we try to access an element from the whichdoes not exist

** Whenever we give colon in slicing it always give a list

** For reversing a list you can use slice operator ie, list[::-1] it gives the reverse list

** syntax of slicing
   list[starting index : stoping index : step(increment/decrement)]
   


-----------------------------------------------------------------------------------------------------------------

Global methods and keywords:

numbers = [1, 2, 3, 4, 5]

del numbers[1:3]

print(numbers) # [1, 4, 5]

del numbers[1]

print(numbers) # [1, 5]

del numbers[:] # we are deleting all the elements from the list

print(numbers) # []

numbers.insert(10, 0) # inserting the element 10 at index 0
 
INSERT ELEMENT AT REAR OF THE LIST: 3 different ways

a.insert(len(a), x)

a.append(x)

a.[len(a):] = [element]
 
Below is an error

numbers[len(numbers):] = 3

TypeError because we must assign only a list(itarable) not a primitive value

****************************************************************************************************
Different operations in list continues...........

numbers = [23, 7, 19, 41, 29, 3, 47]
 
print('Max number = ', max(numbers))
print('Min number = ', min(numbers))
print('Number of elements = ', len(numbers))
print('Sorted numbers = ', sorted(numbers))
print('Numbers = ', numbers)
numbers.sort()
print('Numbers = ', numbers)

********************************************************************************
print('Sorted numbers = ', sorted(numbers))

Here it will not modify the list a just make a copy/duplicate it.

numbers.sort()
print('Numbers = ', numbers)

But here the list is modified into a new list

**********************************************************************************

STRINGS
........

name = 'Cambodia'
 
names = ['aizwal', 'imphal', 'shillong', 'agartala']
 
print(name)
print(name.upper())
print(name.count('a'))
print(name.count('A'))
print(name.upper().count('A'))
print(name.upper().count('a'))
print(name.find('o'))
print(name.find('dia'))
print(name.find('xx')) # Returns -1 because the string that we are


**************************************************************************************
Debate Topic
Team A - Does technology make people lazy 

***************************************************************************************
[3:28 PM] Nithin Neelakanta Rao
l1 = [3, 6, 10]
l2 = [1, 2, 4, 12]
 
if l1 > l2:
    print('List1 is bigger')
else:
    print('List2 is bigger')
   
if l1.__gt__(l2):
    print('List1 is bigger')
else:
    print('List2 is bigger')
 
'''
For readability purpose we use 6 R.oprs
> < >= <= != ==
However we can perform any of the 6 operations using:  > and ==
'''

**************************************************************************************
Data Structure

[3:42 PM] Nithin Neelakanta Rao
list1 = []
list1 = list()
tuple1 = ()
tuple2 = tuple()
dictionary1 = { }
dictionary2 = dict()
set1 = set()
print(type(dictionary1))
print(type(set1))
print(type(tuple1))



====================================================================
varArgFunction1(*arguments):
    print(arguments)
    print(type(arguments)) # tuple
 
def varArgFunction2(*arguments):
    for i in range(len(arguments)):
        print(arguments[i])
 
varArgFunction1(1, 2, 4)
varArgFunction1()
varArgFunction1('list', 'tuple', 'set', 'dictionary')
 
varArgFunction2(1, 2, 4)
varArgFunction2()
varArgFunction2('list', 'tuple', 'set', 'dictionary')
 
''''
def varArgFunction2(*arguments):
        print(arguments)
 
def varArgFunction2(*arguments):
    for i in range(len(arguments)): #Loop with range() function
        print(arguments[i])
 
def varArgFunction2(*arguments):
    for element in arguments: # for each loop. It accesses all elements of the tuple one by one
        print(element)
		
---------------------------------------------------------------------

def varArgFunction1(*arguments):
    print(arguments)
    # arguments[1] = 22 # TypeError
    arguments[5][0] = 20 # even though the list is inside the tuple, we can modify it.
    print(arguments)
    arguments[5].append(50)
    print(arguments)
 
varArgFunction1(1, 2, 4, 'list', 4.5, [2, 3, 5])
 
 
--------------------------------------------------------------------------------
Problems:

1. User gives the data like this:

kerala-tiruvanantapuram karnataka-bengaluru tamilnadu-chennai

You have to separate the states and store in the list states[] and also the seperated capitals must be stored in capitals[]
 
2. Accpet a string of space seperated numbers and store them as a matrix (list of lists) of n rows.

Now print the matrix row-wise
 
3. Accept N strings and count the number of Palindromes in it.
 
4. Accept N strings, and check howmany of them possess the string X
 
5. Accept N main strings and N sub strings into lists and check create a list of numbers of 0s and 1s where 0 represents that the sub string at respective index is not a substring of the main string.
 
main_list = ['andhra pradesh', 'kerala', 'maharashtra', 'haryana']

sub_list  = ['pradesh', 'south', 'rashtra', 'punjab']
 
presence = [1, 0, 1, 0]